#! /usr/bin/env python
# -*-python-*-

"""Using the Python env/kernel specified by the first parameter, execute all
notebooks specified by subsequent parameters.
"""

import sys
import os.path
import subprocess
import glob
import shutil
import uuid
import tempfile


def test_notebooks(kernel, notebooks):
    """Run all the notebooks specified by globbing `notebook_globs` using `kernel`.

    Return   count of failed notebooks
    """
    errs = 0
    for notebook in notebooks:
        if notebook.startswith("#"):
            print("=" * 10, "Skipping", notebook, "=" * 10)
            continue
        print("=" * 10, "Testing", notebook, "=" * 10)
        err = test_notebook(kernel, notebook)
        print("Tested notebook", notebook, "... ok" if not err else "... FAIL")
        errs += err
    return errs


def test_notebook(kernel, notebook):
    here = os.getcwd()
    err = 1  # assume failed
    with tempfile.TemporaryDirectory() as temp_dir:
        source_path = os.path.dirname(os.path.abspath(notebook))
        test_dir = temp_dir + "/test"
        shutil.copytree(source_path, test_dir)
        os.chdir(test_dir)
        if notebook.endswith(".ipynb"):
            cmd = f"papermill --no-progress-bar {os.path.basename(notebook)} test.ipynb -k {kernel}"
        elif notebook.endswith(".py"):
            cmd = f"/opt/common-scripts/env-run  {kernel}  python {os.path.basename(notebook)}"
        else:
            raise ValueError("Unhandled test file extension for: " + notebook)
        err = subprocess.call(cmd.split())  # maybe succeeds
    os.chdir(here)
    return int(err != 0)


def main(*args):
    if len(args) < 2:  # accept 0 notebooks...
        print("test-notebooks <kernel>  <notebooks...>", file=sys.stderr)
        sys.exit(2)
    kernel = sys.argv[1]
    notebook_globs = sys.argv[2:]
    return test_notebooks(kernel, notebook_globs)


if __name__ == "__main__":
    if main(*sys.argv):
        sys.exit(1)
