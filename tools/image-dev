#! /bin/bash
#
# This script is used to launch a Docker container based on the
# mission or common base image so that a developer can
# manually/incrementally execute steps of a Dockerfile in order to
# work out build issues without constantly rebuilding unrelated
# artifacts.  As changes are made, the developer can intelligently
# select what gets rebuilt and what doesn't...  which can be useful
# for working with a single environment.
#
# As part of launching the container, this script maps source code
# from the host VM into the container rw.  This enables a developer to
# modify specs inside the container session, repeating only the
# appropriate build steps... and the modifications will appear outside
# the container in the host's git clone once container development is
# completed.  Once issues are fully worked out, the developer can
# revert to using image-build.
#
# For starters, this scripts mounts the following rw into the
# container:
#
# 1. deployments/common/image/common-scripts --> /opt/common-scripts
#
# 2. deployments/common/image/common-env --> /opt/common-env
#
# 3. deployments/<mission>/image/environments --> /opt/environments
#

set -eu

# The default configuration assumes the mission image ($IMAGE_ID)
# successfully built but still has issues which need to be debugged
# incrementally,  e.g. modules which installed but won't import.
#
# To work relative to an alternate image, pass in the name/tag or
# hash on the command line,  e.g. $COMMON_ID.

STARTING_IMAGE=${1:-`docker image ls -q | head -1`}

cd ${JUPYTERHUB_DIR}

COMMON_MOUNTS="-v ${COMMON_IMAGE_DIR}/common-scripts:/opt/common-scripts:rw"
COMMON_MOUNTS="${COMMON_MOUNTS} -v ${COMMON_IMAGE_DIR}/common-env:/opt/common-env:rw"

MISSION_MOUNTS="-v ${IMAGE_DIR}/environments:/opt/environments:rw"
MISSION_MOUNTS="${MISSION_MOUNTS} -v ${IMAGE_DIR}/env-frozen:/opt/env-frozen:rw"

# skip automatic --rm so files can be recovered from stopped container if needed
IMAGE_RUN_PARS="-it ${COMMON_MOUNTS} ${MISSION_MOUNTS} -e CLEAR_PKG_CACHES=0 -e PATH=/opt/TurboVNC/bin:/opt/conda/bin:/opt/conda/condabin:/opt/conda/bin:/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/common-scripts"

docker run ${IMAGE_RUN_PARS} ${STARTING_IMAGE} /bin/bash
